name: CI/CD Docker App

on:
  push:
    branches: ['develop', 'main']
  pull_request:
    branches: ['develop', 'main']
    types: [opened, synchronize, reopened]

jobs:
  build:
    runs-on: ubuntu-latest
    if: >
      (github.event_name == 'pull_request' && startsWith(github.head_ref, 'sprint-')) ||
      (github.event_name == 'push' && github.ref == 'refs/heads/develop') ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main')

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: python_learning_platform
        # ports:
        #   - 5432:5432
        options: >-
          --health-cmd="pg_isready -U user"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - name: Checkout código
      uses: actions/checkout@v3

    - name: Configurar entorno
      run: echo "Configurando entorno para ${{ github.ref }}"

    - name: Verificar versión de Docker y Compose
      run: |
        docker --version
        docker compose version

    - name: Configurar herramientas Docker
      uses: docker/setup-buildx-action@v2

    - name: Levantar contenedores con Docker Compose
      run: |
        docker compose -f docker-compose.yml up --build -d
        docker compose ps
        docker compose logs backend

    - name: Esperar a que PostgreSQL esté listo
      run: |
        for i in {1..10}; do
          if docker compose exec db pg_isready -U user; then
            echo "PostgreSQL está listo"
            exit 0
          fi
          echo "Esperando PostgreSQL ($i/10)..."
          sleep 5
        done
        echo "PostgreSQL no respondió"
        exit 1

    - name: Esperar a que el backend responda
      run: |
        echo "Esperando a que el backend esté listo..."
        for i in {1..10}; do
          if curl -s -f http://localhost:5000/api/test/message; then
            echo "¡Backend respondió correctamente!"
            exit 0
          fi
          echo "Intento $i/10 - Backend no disponible aún..."
          docker compose logs backend --tail=20
          sleep 10
        done
        echo "ERROR: Backend no respondió después de 100 segundos"
        docker compose logs backend
        exit 1

    - name: Verificar frontend (opcional)
      run: curl -f http://localhost:5173 || echo "Frontend iniciado pero sin pruebas definidas"
      continue-on-error: true

    - name: Detener contenedores
      run: docker compose down

    - name: Limpiar imágenes dangling
      run: docker image prune -f
